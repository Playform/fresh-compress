import h from"fast-glob";import p from"fs";import*as w from"csso";import*as u from"html-minifier-terser";import{minify as j}from"terser";import g from"sharp";import v from"svgo";const y=async(a,t=2)=>{if(a===0)return"0 Bytes";const e=1024,s=t<0?0:t,i=["Bytes","KB","MB","GB","TB","PB","EB","ZB","YB"],f=Math.floor(Math.log(a)/Math.log(e));return`${parseFloat((a/e**f).toFixed(s))} ${i[f]}`},B=async(a,t={})=>{const e=a.options.input.file.split(".").pop();if(!e)return;const s={avci:"avif",avcs:"avif",avifs:"avif",heic:"heif",heics:"heif",heifs:"heif",jfif:"jpeg",jif:"jpeg",jpe:"jpeg",jpg:"jpeg"},i=typeof s[e]<"u"?s[e]:typeof t[e]<"u"?e:!1;if(["avif","gif","heif","jpeg","png","raw","tiff","webp"].includes(i)&&t[i]!==!1)return await a[i](t[i]).toBuffer()},T=async(a,t=2)=>{for(const e in a)if(Object.prototype.hasOwnProperty.call(a,e)){const s=a[e];if(!s)continue;switch(e){case"css":await c(`${a.path}**/*.css`,t,e,i=>w.minify(i,s).css);break;case"html":await c(`${a.path}**/*.html`,t,e,async i=>await u.minify(i,s));break;case"js":await c(`${a.path}**/*.{js,mjs,cjs}`,t,e,async i=>(await j(i,s)).code);break;case"img":await c(`${a.path}**/*.{avci,avcs,avif,avifs,gif,heic,heics,heif,heifs,jfif,jif,jpe,jpeg,jpg,png,raw,tiff,webp}`,t,e,async i=>await B(i,s),async i=>await g(i));break;case"svg":await c(`${a.path}**/*.svg`,t,e,async i=>v.optimize(i,s).data);break;default:break}}},c=async(a,t=2,e="",s=async f=>f,i=async f=>await p.promises.readFile(f,"utf-8"))=>{let f={files:await h(a),sizebefore:0},n={files:0,total:0};for(;f.files.length>0;){const o=f.files.shift();if(o)try{const r=(await p.promises.stat(o)).size;f.sizebefore+=r;const l=await s(await i(o));if(!l)continue;if(r>Buffer.byteLength(l)){await p.promises.writeFile(o,l,"utf-8");const m=(await p.promises.stat(o)).size;n.files++,n.total+=r-m,t>1&&console.info("\x1B[32mCompressed "+o.replace(/^.*[\\\/]/,"")+" for "+await y(r-m)+" ("+((r-m)/r*100).toFixed(2)+"% reduction).\x1B[39m")}}catch{console.log("Error: Cannot compress file "+o+"!")}}t>0&&console.info("\x1B[32mSuccessfully compressed a total of "+n.files+" "+e.toUpperCase()+" "+(n.files===1?"file":"files")+" for "+await y(n.total)+".\x1B[39m")};
